//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input System/GalacticKittenInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GalacticKittenInputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GalacticKittenInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GalacticKittenInputControls"",
    ""maps"": [
        {
            ""name"": ""SpaceshipActionMap"",
            ""id"": ""bd426e1b-4202-4750-aafa-58451e184342"",
            ""actions"": [
                {
                    ""name"": ""ThrottleForwardAction"",
                    ""type"": ""Button"",
                    ""id"": ""49a24af5-b5f5-46c5-99b7-fd32082fc77c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleBackwardAction"",
                    ""type"": ""Button"",
                    ""id"": ""8201062c-517b-4982-bcf2-70f3c7fcffe4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlHandleAction"",
                    ""type"": ""Value"",
                    ""id"": ""7af1ba11-ec51-49a2-a2e6-02a5bde3b841"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89557b55-0d6c-48a7-a2b2-19e13bdf8032"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK Control Schema"",
                    ""action"": ""ThrottleForwardAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97b37590-17fd-4789-8357-9cfb45b95fd0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK Control Schema"",
                    ""action"": ""ThrottleBackwardAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4003ecab-b03a-4fde-8e00-7097bba09a0d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK Control Schema"",
                    ""action"": ""ControlHandleAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""12c47ecc-3499-40fa-8d7e-2d5b316ac0f0"",
            ""actions"": [
                {
                    ""name"": ""HorizontalLookAction"",
                    ""type"": ""Value"",
                    ""id"": ""eb4cf211-743d-496c-acd5-d62dc1c5b821"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalLookAction"",
                    ""type"": ""Value"",
                    ""id"": ""e5cbd2d0-3928-4b0a-ab26-526b85809dec"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""498c0f11-892d-469c-b6b4-0255a5f0a786"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK Control Schema"",
                    ""action"": ""HorizontalLookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e8d6013-be92-4dd6-91c3-7ceb51658085"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MnK Control Schema"",
                    ""action"": ""VerticalLookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MnK Control Schema"",
            ""bindingGroup"": ""MnK Control Schema"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SpaceshipActionMap
        m_SpaceshipActionMap = asset.FindActionMap("SpaceshipActionMap", throwIfNotFound: true);
        m_SpaceshipActionMap_ThrottleForwardAction = m_SpaceshipActionMap.FindAction("ThrottleForwardAction", throwIfNotFound: true);
        m_SpaceshipActionMap_ThrottleBackwardAction = m_SpaceshipActionMap.FindAction("ThrottleBackwardAction", throwIfNotFound: true);
        m_SpaceshipActionMap_ControlHandleAction = m_SpaceshipActionMap.FindAction("ControlHandleAction", throwIfNotFound: true);
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_HorizontalLookAction = m_PlayerActionMap.FindAction("HorizontalLookAction", throwIfNotFound: true);
        m_PlayerActionMap_VerticalLookAction = m_PlayerActionMap.FindAction("VerticalLookAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceshipActionMap
    private readonly InputActionMap m_SpaceshipActionMap;
    private List<ISpaceshipActionMapActions> m_SpaceshipActionMapActionsCallbackInterfaces = new List<ISpaceshipActionMapActions>();
    private readonly InputAction m_SpaceshipActionMap_ThrottleForwardAction;
    private readonly InputAction m_SpaceshipActionMap_ThrottleBackwardAction;
    private readonly InputAction m_SpaceshipActionMap_ControlHandleAction;
    public struct SpaceshipActionMapActions
    {
        private @GalacticKittenInputControls m_Wrapper;
        public SpaceshipActionMapActions(@GalacticKittenInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThrottleForwardAction => m_Wrapper.m_SpaceshipActionMap_ThrottleForwardAction;
        public InputAction @ThrottleBackwardAction => m_Wrapper.m_SpaceshipActionMap_ThrottleBackwardAction;
        public InputAction @ControlHandleAction => m_Wrapper.m_SpaceshipActionMap_ControlHandleAction;
        public InputActionMap Get() { return m_Wrapper.m_SpaceshipActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceshipActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceshipActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceshipActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceshipActionMapActionsCallbackInterfaces.Add(instance);
            @ThrottleForwardAction.started += instance.OnThrottleForwardAction;
            @ThrottleForwardAction.performed += instance.OnThrottleForwardAction;
            @ThrottleForwardAction.canceled += instance.OnThrottleForwardAction;
            @ThrottleBackwardAction.started += instance.OnThrottleBackwardAction;
            @ThrottleBackwardAction.performed += instance.OnThrottleBackwardAction;
            @ThrottleBackwardAction.canceled += instance.OnThrottleBackwardAction;
            @ControlHandleAction.started += instance.OnControlHandleAction;
            @ControlHandleAction.performed += instance.OnControlHandleAction;
            @ControlHandleAction.canceled += instance.OnControlHandleAction;
        }

        private void UnregisterCallbacks(ISpaceshipActionMapActions instance)
        {
            @ThrottleForwardAction.started -= instance.OnThrottleForwardAction;
            @ThrottleForwardAction.performed -= instance.OnThrottleForwardAction;
            @ThrottleForwardAction.canceled -= instance.OnThrottleForwardAction;
            @ThrottleBackwardAction.started -= instance.OnThrottleBackwardAction;
            @ThrottleBackwardAction.performed -= instance.OnThrottleBackwardAction;
            @ThrottleBackwardAction.canceled -= instance.OnThrottleBackwardAction;
            @ControlHandleAction.started -= instance.OnControlHandleAction;
            @ControlHandleAction.performed -= instance.OnControlHandleAction;
            @ControlHandleAction.canceled -= instance.OnControlHandleAction;
        }

        public void RemoveCallbacks(ISpaceshipActionMapActions instance)
        {
            if (m_Wrapper.m_SpaceshipActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceshipActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceshipActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceshipActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceshipActionMapActions @SpaceshipActionMap => new SpaceshipActionMapActions(this);

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private List<IPlayerActionMapActions> m_PlayerActionMapActionsCallbackInterfaces = new List<IPlayerActionMapActions>();
    private readonly InputAction m_PlayerActionMap_HorizontalLookAction;
    private readonly InputAction m_PlayerActionMap_VerticalLookAction;
    public struct PlayerActionMapActions
    {
        private @GalacticKittenInputControls m_Wrapper;
        public PlayerActionMapActions(@GalacticKittenInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalLookAction => m_Wrapper.m_PlayerActionMap_HorizontalLookAction;
        public InputAction @VerticalLookAction => m_Wrapper.m_PlayerActionMap_VerticalLookAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Add(instance);
            @HorizontalLookAction.started += instance.OnHorizontalLookAction;
            @HorizontalLookAction.performed += instance.OnHorizontalLookAction;
            @HorizontalLookAction.canceled += instance.OnHorizontalLookAction;
            @VerticalLookAction.started += instance.OnVerticalLookAction;
            @VerticalLookAction.performed += instance.OnVerticalLookAction;
            @VerticalLookAction.canceled += instance.OnVerticalLookAction;
        }

        private void UnregisterCallbacks(IPlayerActionMapActions instance)
        {
            @HorizontalLookAction.started -= instance.OnHorizontalLookAction;
            @HorizontalLookAction.performed -= instance.OnHorizontalLookAction;
            @HorizontalLookAction.canceled -= instance.OnHorizontalLookAction;
            @VerticalLookAction.started -= instance.OnVerticalLookAction;
            @VerticalLookAction.performed -= instance.OnVerticalLookAction;
            @VerticalLookAction.canceled -= instance.OnVerticalLookAction;
        }

        public void RemoveCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    private int m_MnKControlSchemaSchemeIndex = -1;
    public InputControlScheme MnKControlSchemaScheme
    {
        get
        {
            if (m_MnKControlSchemaSchemeIndex == -1) m_MnKControlSchemaSchemeIndex = asset.FindControlSchemeIndex("MnK Control Schema");
            return asset.controlSchemes[m_MnKControlSchemaSchemeIndex];
        }
    }
    public interface ISpaceshipActionMapActions
    {
        void OnThrottleForwardAction(InputAction.CallbackContext context);
        void OnThrottleBackwardAction(InputAction.CallbackContext context);
        void OnControlHandleAction(InputAction.CallbackContext context);
    }
    public interface IPlayerActionMapActions
    {
        void OnHorizontalLookAction(InputAction.CallbackContext context);
        void OnVerticalLookAction(InputAction.CallbackContext context);
    }
}
